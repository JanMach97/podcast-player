// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Navbar renders without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Navbar />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Link
          replace={false}
          to="/"
        >
          <div
            className="logo"
          >
            <i
              className="fas fa-microphone"
            />
            <h1>
              Podcast
            </h1>
          </div>
        </Link>,
        <input
          onChange={[Function]}
          placeholder="Search Episode"
          type="text"
          value=""
        />,
      ],
      "className": "navbar",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <div
            className="logo"
          >
            <i
              className="fas fa-microphone"
            />
            <h1>
              Podcast
            </h1>
          </div>,
          "replace": false,
          "to": "/",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <i
                className="fas fa-microphone"
              />,
              <h1>
                Podcast
              </h1>,
            ],
            "className": "logo",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "fas fa-microphone",
              },
              "ref": null,
              "rendered": null,
              "type": "i",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Podcast",
              },
              "ref": null,
              "rendered": "Podcast",
              "type": "h1",
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "onChange": [Function],
          "placeholder": "Search Episode",
          "type": "text",
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Link
            replace={false}
            to="/"
          >
            <div
              className="logo"
            >
              <i
                className="fas fa-microphone"
              />
              <h1>
                Podcast
              </h1>
            </div>
          </Link>,
          <input
            onChange={[Function]}
            placeholder="Search Episode"
            type="text"
            value=""
          />,
        ],
        "className": "navbar",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <div
              className="logo"
            >
              <i
                className="fas fa-microphone"
              />
              <h1>
                Podcast
              </h1>
            </div>,
            "replace": false,
            "to": "/",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <i
                  className="fas fa-microphone"
                />,
                <h1>
                  Podcast
                </h1>,
              ],
              "className": "logo",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "fas fa-microphone",
                },
                "ref": null,
                "rendered": null,
                "type": "i",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Podcast",
                },
                "ref": null,
                "rendered": "Podcast",
                "type": "h1",
              },
            ],
            "type": "div",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "onChange": [Function],
            "placeholder": "Search Episode",
            "type": "text",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
